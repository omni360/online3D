
ï»¿
function VertexToMesh(){var getVertexCountInPacket=function(vertexCount){if(vertexCount>=100000)
return 3000;else if(vertexCount>=40000)
return 1500;else if(vertexCount>=10000)
return 1200;return 3;}
this.loadAsync=function(scene,object,progressCallback,finishCallback){var _scene=scene;var _finishCallback=finishCallback||function(){};var _progressCallback=progressCallback||function(){};var _this=this;var done=false;var geometry=new THREE.Geometry();var modelColor=object.Color;var vertices=object.Vertices;var i=0;var allVerticesCount=vertices.length;var readStep=function(iterator){var index=parseInt(getVertexCountInPacket(allVerticesCount));var verticesCount=0;if(i===allVerticesCount){done=true;}
else{while(index>0&&i<allVerticesCount){geometry.vertices.push(vertices[i]);verticesCount++;if(verticesCount==3){var length=geometry.vertices.length;var face=new THREE.Face3(length-3,length-2,length-1,1);face.color.setHex(modelColor);geometry.faces.push(face);verticesCount=0;}
index--;i++;}}
iterator();}
var isLoadingDone=function(){_progressCallback(i,allVerticesCount);return done;}
var complete=function(){if(geometry.vertices.length>0){var meshMaterial=new THREE.MeshPhongMaterial({ambient:0x222222,vertexColors:THREE.FaceColors,specular:0x49D8FB,shininess:140,perPixel:false,overdraw:false,side:THREE.DoubleSide});var meshWireframe=new THREE.MeshBasicMaterial({color:0x111111,wireframe:true});var multiMaterial=[meshMaterial,meshWireframe];geometry.computeFaceNormals();geometry.computeVertexNormals();geometry.__dirtyColors=true;var mesh=THREE.SceneUtils.createMultiMaterialObject(geometry,multiMaterial);mesh.name=object.ModelName;mesh.facecount=geometry.faces.length;mesh.verticescount=geometry.vertices.length;mesh.filesize=object.Size;mesh.color=modelColor;_scene.add(mesh);_finishCallback();}}
async.until(isLoadingDone,readStep,complete);}}